{"version":3,"sources":["hooks/use-square-number/use-square-number.component.jsx","hooks/use-ref/use-ref.component.tsx","pages/hooks.page.js"],"names":["useSquareNumber","someNumber","useState","numberData","setNumberData","useEffect","UseRef","memo","ref","useRef","valueThatIsNotChangedOnRerendering","console","log","current","useLayoutEffect","name","setName","result","onClick","onSubmit","evt","preventDefault","alert","type","value","onChange","e","target","HooksPage"],"mappings":"iJAUeA,EALS,SAAAC,GAAe,IAAD,EACEC,qBADF,mBAC3BC,EAD2B,KACfC,EADe,KAGlC,OADAC,qBAAU,kBAAMD,EAAc,KAAD,IAACH,EAAc,MAAI,CAACA,IAC1CE,GCmDIG,EAhDAC,gBAAkB,WAC7B,IAAMC,EAAMC,iBAAuB,MAG7BC,EAAqCD,iBAAe,IAC1DE,QAAQC,IAAIF,GAEZL,qBAAU,WACNM,QAAQC,IAAI,iBAAkBJ,EAAIK,WACnC,IAEHC,2BAAgB,WACZH,QAAQC,IAAI,uCACb,IAbgC,MAeXV,mBAAS,IAfE,mBAe5Ba,EAf4B,KAetBC,EAfsB,KAwB/BC,EAASjB,EAAgBe,GAG7B,OACI,oCACI,yBAAKP,IAAKA,EAAKU,QAAS,kBAAMP,QAAQC,IAAIJ,KAA1C,UAGA,0BAAMW,SAfO,SAACC,GAClBA,EAAIC,iBAEJC,MAAM,mBAAD,OAAoBP,MAajB,yCAEI,2BACIQ,KAAK,OACLC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAQU,EAAEC,OAAOH,WAGxC,2BAAOD,KAAK,SAASC,MAAM,YAE/B,qDAA2BP,OCxBxBW,UA3BG,WAKd,OACI,oCACI,yCACA,kBAAC,EAAD","file":"static/js/5.621c2014.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n//can't convert states to typescript, either with types or :\n//why do we need to provide someNumber as a second argument here?\n\nconst useSquareNumber = someNumber => {\n    const [numberData, setNumberData] = useState();\n    useEffect(() => setNumberData(someNumber ** 2), [someNumber]);\n    return numberData;\n};\nexport default useSquareNumber;\n","import React, {\n    memo,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport useSquareNumber from '../use-square-number/use-square-number.component.jsx';\n\ntype UseRefProps = {};\n\nconst UseRef = memo<UseRefProps>(() => {\n    const ref = useRef<HTMLDivElement>(null!);\n\n    // 2nd way of useRef usage\n    const valueThatIsNotChangedOnRerendering = useRef<object>({});\n    console.log(valueThatIsNotChangedOnRerendering);\n\n    useEffect(() => {\n        console.log('useEffect ref ', ref.current);\n    }, []);\n\n    useLayoutEffect(() => {\n        console.log(\"I'll be rendered before useEffect\");\n    }, []);\n\n    const [name, setName] = useState('');\n\n    const handleSubmit = (evt: any) => {\n        evt.preventDefault();\n\n        alert(`Submitting Name ${name}`);\n    };\n\n    //using the hook get the number squared\n    let result = useSquareNumber(name);\n    //another problem here, updating for no reason\n    //if I put the logic in handleSubmit, the component becomes 'uncontrolled'\n    return (\n        <>\n            <div ref={ref} onClick={() => console.log(ref)}>\n                useRef\n            </div>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Number:\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                    />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <h3>The squared number is {result}</h3>\n        </>\n    );\n});\n\nexport default UseRef;\n","import React from 'react';\nimport UseRef from '../hooks/use-ref/use-ref.component';\n\nconst HooksPage = () => {\n    // const { themeContextValue, changeThemeContextValue } = useContext(\n    //     ThemeContext\n    // );\n\n    return (\n        <>\n            <h3>Use state</h3>\n            <UseRef />\n            {/* <UseEffect />*/}\n            {/* <UseState />*/}\n            {/* <UseGetRequest />*/}\n\n            {/* <div>Hooks Page Theme context value {themeContextValue}</div>*/}\n            {/* <select*/}\n            {/*    onChange={event => {*/}\n            {/*        changeThemeContextValue(event.target.value);*/}\n            {/*    }}*/}\n            {/* >*/}\n            {/*    <option value=\"dark\">Dark theme</option>*/}\n            {/*    <option value=\"light\">Light theme</option>*/}\n            {/* </select>*/}\n            {/* <Popover>{themeContextValue}</Popover>*/}\n        </>\n    );\n};\n\nexport default HooksPage;\n"],"sourceRoot":""}
{"version":3,"sources":["hooks/use-ref/use-ref.component.tsx","pages/hooks.page.js"],"names":["UseRef","memo","ref","useRef","useEffect","console","log","current","useLayoutEffect","useState","name","setName","onClick","onSubmit","e","preventDefault","type","value","onChange","target","HooksPage"],"mappings":"iJAiEeA,EAvDAC,gBAAkB,WAC7B,IAAMC,EAAMC,iBAAuB,MAKQA,iBAAe,IAE1DC,qBAAU,WAGNC,QAAQC,IAAI,iBAAkBJ,EAAIK,WACnC,IAEHC,2BAAgB,WAGZH,QAAQC,IAAI,uCACb,IAlBgC,MAoBXG,qBApBW,mBAoB5BC,EApB4B,KAoBtBC,EApBsB,KA+BnC,OACI,oCACI,yBAAKT,IAAKA,EAAKU,QAAS,kBAAMP,QAAQC,IAAIJ,KAA1C,UAGA,0BAAMW,SAdO,SAACC,GAClBA,EAAEC,iBACFJ,EAAQD,KAaA,yCAEI,2BACIA,KAAK,OACLM,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAAAJ,GACNH,EAAQG,EAAEK,OAAOF,WAI7B,2BAAOD,KAAK,SAASC,MAAM,YAE/B,0DC9BGG,UA3BG,WAKd,OACI,oCACI,yCACA,kBAAC,EAAD","file":"static/js/5.425c83ad.chunk.js","sourcesContent":["import React, {\n    memo,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\n\ntype UseRefProps = {};\n\nconst UseRef = memo<UseRefProps>(() => {\n    const ref = useRef<HTMLDivElement>(null!);\n\n    // 2nd way of useRef usage\n    // for example\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const valueThatIsNotChangedOnRerendering = useRef<object>({});\n\n    useEffect(() => {\n        // need for useEffect illustration\n        // eslint-disable-next-line no-console\n        console.log('useEffect ref ', ref.current);\n    }, []);\n\n    useLayoutEffect(() => {\n        // need for useLayoutEffect illustration\n        // eslint-disable-next-line no-console\n        console.log(\"I'll be rendered before useEffect\");\n    }, []);\n\n    const [name, setName] = useState<string>();\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setName(name);\n    };\n\n    // using the hook get the number squared\n    // const result = useSquareNumber(+name);\n    // another problem here, updating for no reason\n    // if I put the logic in handleSubmit, the component becomes 'uncontrolled'\n    return (\n        <>\n            <div ref={ref} onClick={() => console.log(ref)}>\n                useRef\n            </div>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Number:\n                    <input\n                        name=\"name\"\n                        type=\"text\"\n                        value={name}\n                        onChange={e => {\n                            setName(e.target.value);\n                        }}\n                    />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <h3>The squared number is </h3>\n        </>\n    );\n});\n\nexport default UseRef;\n","import React from 'react';\nimport UseRef from '../hooks/use-ref/use-ref.component';\n\nconst HooksPage = () => {\n    // const { themeContextValue, changeThemeContextValue } = useContext(\n    //     ThemeContext\n    // );\n\n    return (\n        <>\n            <h3>Use state</h3>\n            <UseRef />\n            {/* <UseEffect />*/}\n            {/* <UseState />*/}\n            {/* <UseGetRequest />*/}\n\n            {/* <div>Hooks Page Theme context value {themeContextValue}</div>*/}\n            {/* <select*/}\n            {/*    onChange={event => {*/}\n            {/*        changeThemeContextValue(event.target.value);*/}\n            {/*    }}*/}\n            {/* >*/}\n            {/*    <option value=\"dark\">Dark theme</option>*/}\n            {/*    <option value=\"light\">Light theme</option>*/}\n            {/* </select>*/}\n            {/* <Popover>{themeContextValue}</Popover>*/}\n        </>\n    );\n};\n\nexport default HooksPage;\n"],"sourceRoot":""}
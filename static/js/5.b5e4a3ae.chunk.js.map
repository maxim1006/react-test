{"version":3,"sources":["hooks/use-ref/use-ref.component.tsx","hooks/use-window-size/use-window-size.hook.tsx","pages/hooks.page.js"],"names":["UseRef","memo","ref","useRef","useEffect","console","log","current","useLayoutEffect","onClick","getWindowDimensions","window","width","innerWidth","height","innerHeight","HooksPage","useState","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions"],"mappings":"0IA+BeA,EA3BAC,gBAAkB,WAC7B,IAAMC,EAAMC,iBAAuB,MAiBnC,OAZAC,qBAAU,WAGNC,QAAQC,IAAI,iBAAkBJ,EAAIK,WACnC,IAEHC,2BAAgB,WAGZH,QAAQC,IAAI,uCACb,IAKC,yBAAKJ,IAAKA,EAAKO,QAAS,kBAAMJ,QAAQC,IAAIJ,KAA1C,a,OClBFQ,EAAsB,WACxB,MAAmDC,OAEnD,MAAO,CACHC,MAHJ,EAAQC,WAIJC,OAJJ,EAA2BC,cC0BhBC,UA9BG,WAId,MDQW,WACX,MAAgDC,mBAE9CP,KAFF,mBAAOQ,EAAP,KAAyBC,EAAzB,KAaA,OATAf,qBAAU,WACN,IAAMgB,EAAe,WACjBD,EAAoBT,MAIxB,OADAC,OAAOU,iBAAiB,SAAUD,GAC3B,kBAAMT,OAAOW,oBAAoB,SAAUF,MACnD,IAEIF,ECtBmBK,GAAlBT,EAAR,EAAQA,OAAQF,EAAhB,EAAgBA,MAChB,OACI,oCACI,yCACA,kBAAC,EAAD,MACA,qCACWA,EADX,WAC0BE","file":"static/js/5.b5e4a3ae.chunk.js","sourcesContent":["import React, { memo, useEffect, useLayoutEffect, useRef } from 'react';\n\ntype UseRefProps = {};\n\nconst UseRef = memo<UseRefProps>(() => {\n    const ref = useRef<HTMLDivElement>(null!);\n\n    // 2nd way of useRef usage\n    // const valueThatIsNotChangedOnRerendering = useRef<object>({});\n\n    useEffect(() => {\n        // console.log needed for the example\n        // eslint-disable-next-line no-console\n        console.log('useEffect ref ', ref.current);\n    }, []);\n\n    useLayoutEffect(() => {\n        // console.log needed for the example\n        // eslint-disable-next-line no-console\n        console.log(\"I'll be rendered before useEffect\");\n    }, []);\n\n    return (\n        // console.log needed for the example\n        // eslint-disable-next-line no-console\n        <div ref={ref} onClick={() => console.log(ref)}>\n            UseRef\n        </div>\n    );\n});\n\nexport default UseRef;\n","import { useState, useEffect } from 'react';\n\ninterface WindowSizeHookModel {\n    width: number;\n    height: number;\n}\n\nconst getWindowDimensions = (): WindowSizeHookModel => {\n    const { innerWidth: width, innerHeight: height } = window;\n\n    return {\n        width,\n        height,\n    };\n};\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState<\n        WindowSizeHookModel\n    >(getWindowDimensions());\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        };\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n","import React from 'react';\nimport UseRef from '../hooks/use-ref/use-ref.component';\nimport useWindowDimensions from '../hooks/use-window-size/use-window-size.hook';\n\nconst HooksPage = () => {\n    // const { themeContextValue, changeThemeContextValue } = useContext(\n    //     ThemeContext\n    // );\n    const { height, width } = useWindowDimensions();\n    return (\n        <>\n            <h3>Use state</h3>\n            <UseRef />\n            <h2>\n                width:{width} height:{height}\n            </h2>\n            {/* <UseEffect />*/}\n            {/* <UseState />*/}\n            {/* <UseGetRequest />*/}\n\n            {/* <div>Hooks Page Theme context value {themeContextValue}</div>*/}\n            {/* <select*/}\n            {/*    onChange={event => {*/}\n            {/*        changeThemeContextValue(event.target.value);*/}\n            {/*    }}*/}\n            {/* >*/}\n            {/*    <option value=\"dark\">Dark theme</option>*/}\n            {/*    <option value=\"light\">Light theme</option>*/}\n            {/* </select>*/}\n            {/* <Popover>{themeContextValue}</Popover>*/}\n        </>\n    );\n};\n\nexport default HooksPage;\n"],"sourceRoot":""}